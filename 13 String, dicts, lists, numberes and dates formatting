'''placeholders for values that need to be repeated'''
person = {'name': 'Jenn', 'age': 23}
sentence = 'My name is {0} and I am {1} years old.'.format(person['name'], person['age'])
print(sentence)

'''grabing specific fields from our placeholders'''
tag = 'h1'
text = 'This is headline'
sentence = '<{0}>{1}</{0}>'.format(tag, text)
print(sentence)

'''within format accessing the name and the age to the string'''
person = {'name': 'Jenn', 'age': 23}
sentence = 'My name is {0[name[]} and I am {0[age]} years old.'.format(person)
print(sentence)

'''using dot attribute to grab values'''
class Person():
 def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person('Jack','33')
sentence = 'My name is {0.name} and I am {0.age} years old.'.format(p1)
print(sentence)

'''pass keyword argument to format'''
sentence = 'My name is {name} and i am {age} years old.'.format(name='Jane', age='30')
print(sentence)

'''unpack dictionary then it will fill in those keyword'''
person = {'name': 'Jenn', 'age': 23}
sentence = 'My name is {name} and I am {age} years old.'.format(**person)

'''add formatting to our placeholders, adding digits to 2'''
for i in range(1,11):
    sentence = 'The value is {:02}'.format(i)
    print(sentence)
    
'''format to decimal places'''
pi = 3.14159265
sentence = 'Pi is equal to {:.2f}'.format(pi)
print(sentence)

'''adding comma separators on large values and added two decimal places on to the end'''
sentence = '1 MB is equal to {:,.2f} bytes'.format(1000**2)

 '''print dates formats'''
 import datetime
 sentence = '{:%B %d, %Y}'.format(my_date)
